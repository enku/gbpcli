"""Tests for the status subcommand"""

# pylint: disable=missing-function-docstring,protected-access
from argparse import Namespace
from unittest import mock

from unittest_fixtures import requires

from gbpcli.subcommands.status import handler as status

from . import LOCAL_TIMEZONE, TestCase, make_response


@requires("gbp", "console")
@mock.patch("gbpcli.render.LOCAL_TIMEZONE", new=LOCAL_TIMEZONE)
class StatusTestCase(TestCase):
    """status() tests"""

    maxDiff = None

    def test(self):
        args = Namespace(machine="lighthouse", number="3587")
        gbp = self.fixtures.gbp
        console = self.fixtures.console
        make_response(gbp, "status.json")

        status(args, gbp, console)

        expected = """\
â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Build:          lighthouse 3587                â”‚
â”‚ BuildDate:      Fri Nov 12 21:23:34 2021 -0700 â”‚
â”‚ Submitted:      Fri Nov 12 21:25:53 2021 -0700 â”‚
â”‚ Completed:      Fri Nov 12 21:29:34 2021 -0700 â”‚
â”‚ Published:      no                             â”‚
â”‚ Keep:           no                             â”‚
â”‚ Tags:           @testing                       â”‚
â”‚ Packages-built: app-editors/vim-8.2.3582       â”‚
â”‚                 app-editors/vim-core-8.2.3582  â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ðŸ“Ž Notes             â”‚
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚This is a build note.â”‚
â”‚Hello world!         â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
"""
        self.assertEqual(console.out.getvalue(), expected)
        self.assert_graphql(gbp, gbp.query.gbpcli.build, id="lighthouse.3587")

    def test_should_get_latest_when_number_is_none(self):
        args = Namespace(machine="lighthouse", number=None)
        gbp = self.fixtures.gbp
        console = self.fixtures.console
        make_response(gbp, {"data": {"latest": {"id": "lighthouse.3587"}}})
        make_response(gbp, "status.json")

        return_status = status(args, gbp, console)

        self.assert_graphql(gbp, gbp.query.gbpcli.latest, index=0, machine="lighthouse")
        self.assert_graphql(gbp, gbp.query.gbpcli.build, index=1, id="lighthouse.3587")
        self.assertEqual(return_status, 0)

    def test_should_print_error_when_build_does_not_exist(self):
        args = Namespace(machine="bogus", number="934")
        gbp = self.fixtures.gbp
        console = self.fixtures.console
        make_response(gbp, {"data": {"build": None}})

        return_status = status(args, gbp, console)

        self.assertEqual(return_status, 1)
        self.assertEqual(console.err.getvalue(), "Not found\n")
